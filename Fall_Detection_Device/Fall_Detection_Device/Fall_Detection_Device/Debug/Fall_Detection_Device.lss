
Fall_Detection_Device.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00000d8c  00000e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800198  00800198  00000eb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00000f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029da  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001285  00000000  00000000  00003c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001359  00000000  00000000  00004e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  000061e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010eb  00000000  00000000  00006758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c81  00000000  00000000  00007843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  000084c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_26>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ec e8       	ldi	r30, 0x8C	; 140
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 39       	cpi	r26, 0x98	; 152
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e9       	ldi	r26, 0x98	; 152
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a9 3c       	cpi	r26, 0xC9	; 201
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 88 00 	call	0x110	; 0x110 <main>
 102:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 10a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <system_init>
 10e:	08 95       	ret

00000110 <main>:
#include <atmel_start.h>
#include "examples/include/spi_basic_example.h"

int main(void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <main+0x6>
 116:	1f 92       	push	r1
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62

	uint8_t buffer[3] = {0x45, 5, 0};
 11c:	85 e4       	ldi	r24, 0x45	; 69
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 83       	std	Y+2, r24	; 0x02
 124:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t dummy_byte = 0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 126:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
	
	/* Replace with your application code */
	/* Really ??? */

	printf("\r\nSend byte 0xAA to SPI");
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	9f 93       	push	r25
 130:	8f 93       	push	r24
 132:	0e 94 e6 03 	call	0x7cc	; 0x7cc <printf>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 136:	2c 98       	cbi	0x05, 4	; 5
	
	SPI_SS_A_set_level(false);
	dummy_byte = SPI_0_exchange_byte(0xAA);
 138:	8a ea       	ldi	r24, 0xAA	; 170
 13a:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_0_exchange_byte>
 13e:	8e 01       	movw	r16, r28
 140:	0f 5f       	subi	r16, 0xFF	; 255
 142:	1f 4f       	sbci	r17, 0xFF	; 255
 144:	7e 01       	movw	r14, r28
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	e8 0e       	add	r14, r24
 14a:	f1 1c       	adc	r15, r1
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
	SPI_SS_A_toggle_level;

	for (uint8_t i=0; i<sizeof(buffer);i++)
	{
		SPI_SS_A_toggle_level;
		dummy_byte = SPI_0_exchange_byte(buffer[i]);
 150:	f8 01       	movw	r30, r16
 152:	81 91       	ld	r24, Z+
 154:	8f 01       	movw	r16, r30
 156:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_0_exchange_byte>
	
	SPI_SS_A_set_level(false);
	dummy_byte = SPI_0_exchange_byte(0xAA);
	SPI_SS_A_toggle_level;

	for (uint8_t i=0; i<sizeof(buffer);i++)
 15a:	0e 15       	cp	r16, r14
 15c:	1f 05       	cpc	r17, r15
 15e:	c1 f7       	brne	.-16     	; 0x150 <main+0x40>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 160:	2c 9a       	sbi	0x05, 4	; 5
		SPI_SS_A_toggle_level;
	}
	SPI_SS_A_set_level(true);
	

	if (dummy_byte)
 162:	88 23       	and	r24, r24
 164:	49 f0       	breq	.+18     	; 0x178 <main+0x68>
	printf("first spi example test successfully run.");
 166:	8a e4       	ldi	r24, 0x4A	; 74
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	9f 93       	push	r25
 16c:	8f 93       	push	r24
 16e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <printf>
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	08 c0       	rjmp	.+16     	; 0x188 <main+0x78>
	else
	printf("first spi example test :( wrong :( ");
 178:	83 e7       	ldi	r24, 0x73	; 115
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	9f 93       	push	r25
 17e:	8f 93       	push	r24
 180:	0e 94 e6 03 	call	0x7cc	; 0x7cc <printf>
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0x78>

0000018a <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 18a:	26 98       	cbi	0x04, 6	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 18c:	2e 98       	cbi	0x05, 6	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 18e:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 190:	2d 98       	cbi	0x05, 5	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 192:	27 9a       	sbi	0x04, 7	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 194:	2f 98       	cbi	0x05, 7	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
 196:	0e 94 43 03 	call	0x686	; 0x686 <SPI_0_init>
 19a:	08 95       	ret

0000019c <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 19c:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 19e:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1a0:	53 9a       	sbi	0x0a, 3	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1a2:	5b 98       	cbi	0x0b, 3	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 1a4:	0e 94 c1 03 	call	0x782	; 0x782 <USART_0_init>
 1a8:	08 95       	ret

000001aa <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM3);
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	       | (1 << PRADC) | (1 << PRSPI0);

	PRR2 = (1 << PRUSART2) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTWI1);
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f8063>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 1bc:	91 b1       	in	r25, 0x01	; 1
 1be:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
 1c0:	92 b1       	in	r25, 0x02	; 2
 1c2:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 1c4:	94 b1       	in	r25, 0x04	; 4
 1c6:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1c8:	95 b1       	in	r25, 0x05	; 5
 1ca:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1cc:	97 b1       	in	r25, 0x07	; 7
 1ce:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
 1d0:	98 b1       	in	r25, 0x08	; 8
 1d2:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1d4:	9a b1       	in	r25, 0x0a	; 10
 1d6:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1d8:	9b b1       	in	r25, 0x0b	; 11
 1da:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 1dc:	8d b1       	in	r24, 0x0d	; 13
 1de:	80 78       	andi	r24, 0x80	; 128
 1e0:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 1e2:	8e b1       	in	r24, 0x0e	; 14
 1e4:	8f 67       	ori	r24, 0x7F	; 127
 1e6:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRA |= 1 << pin;
 1e8:	0f 9a       	sbi	0x01, 7	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTA |= 1 << pin;
 1ea:	17 9a       	sbi	0x02, 7	; 2
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 1ec:	24 9a       	sbi	0x04, 4	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 1ee:	2c 9a       	sbi	0x05, 4	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
 1f0:	3e 98       	cbi	0x07, 6	; 7
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 1f2:	3e 98       	cbi	0x07, 6	; 7

		PORTC |= 1 << pin;
 1f4:	46 9a       	sbi	0x08, 6	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
 1f6:	3f 9a       	sbi	0x07, 7	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 1f8:	47 98       	cbi	0x08, 7	; 8
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	60 e8       	ldi	r22, 0x80	; 128
 1fe:	81 e6       	ldi	r24, 0x61	; 97
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 3c 03 	call	0x678	; 0x678 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 206:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 208:	15 be       	out	0x35, r1	; 53
#include <system.h>

/* configure pins and initialize registers */
void I2C_0_initialization(void)
{
	I2C_0_init();
 20a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <I2C_0_init>

	sysctrl_init();

	I2C_0_initialization();

	SPI_0_initialization();
 20e:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_0_initialization>

	USART_0_initialization();
 212:	0e 94 ce 00 	call	0x19c	; 0x19c <USART_0_initialization>
 216:	08 95       	ret

00000218 <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
}
 218:	80 e9       	ldi	r24, 0x90	; 144
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21e:	e8 e9       	ldi	r30, 0x98	; 152
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	80 83       	st	Z, r24
 228:	13 86       	std	Z+11, r1	; 0x0b
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	08 95       	ret

0000022e <I2C_0_do_I2C_IDLE>:
 22e:	e8 e9       	ldi	r30, 0x98	; 152
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	80 81       	ld	r24, Z
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	80 83       	st	Z, r24
 238:	13 86       	std	Z+11, r1	; 0x0b
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret

0000023e <I2C_0_do_I2C_SEND_RESTART_READ>:
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 6a       	ori	r24, 0xA0	; 160
 246:	80 83       	st	Z, r24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	08 95       	ret

0000024c <I2C_0_do_I2C_SEND_RESTART_WRITE>:
 24c:	ec eb       	ldi	r30, 0xBC	; 188
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	80 6a       	ori	r24, 0xA0	; 160
 254:	80 83       	st	Z, r24
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	08 95       	ret

0000025a <I2C_0_do_I2C_SEND_RESTART>:
 25a:	ec eb       	ldi	r30, 0xBC	; 188
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6a       	ori	r24, 0xA0	; 160
 262:	80 83       	st	Z, r24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret

00000268 <I2C_0_do_I2C_SEND_ADR_READ>:
 268:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 26c:	88 7f       	andi	r24, 0xF8	; 248
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	41 f0       	breq	.+16     	; 0x282 <I2C_0_do_I2C_SEND_ADR_READ+0x1a>
 272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	80 31       	cpi	r24, 0x10	; 16
 27a:	19 f0       	breq	.+6      	; 0x282 <I2C_0_do_I2C_SEND_ADR_READ+0x1a>
 27c:	0e 94 0c 01 	call	0x218	; 0x218 <I2C_0_do_I2C_RESET>
 280:	08 95       	ret
 282:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <__data_end+0x1>
 286:	88 0f       	add	r24, r24
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 28e:	ec eb       	ldi	r30, 0xBC	; 188
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	80 83       	st	Z, r24
 298:	80 81       	ld	r24, Z
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	80 83       	st	Z, r24
 29e:	8a e0       	ldi	r24, 0x0A	; 10
 2a0:	08 95       	ret

000002a2 <I2C_0_do_I2C_SEND_ADR_WRITE>:
 2a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2a6:	88 7f       	andi	r24, 0xF8	; 248
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	41 f0       	breq	.+16     	; 0x2bc <I2C_0_do_I2C_SEND_ADR_WRITE+0x1a>
 2ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2b0:	88 7f       	andi	r24, 0xF8	; 248
 2b2:	80 31       	cpi	r24, 0x10	; 16
 2b4:	19 f0       	breq	.+6      	; 0x2bc <I2C_0_do_I2C_SEND_ADR_WRITE+0x1a>
 2b6:	0e 94 0c 01 	call	0x218	; 0x218 <I2C_0_do_I2C_RESET>
 2ba:	08 95       	ret
 2bc:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <__data_end+0x1>
 2c0:	88 0f       	add	r24, r24
 2c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2c6:	ec eb       	ldi	r30, 0xBC	; 188
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7d       	andi	r24, 0xDF	; 223
 2ce:	80 83       	st	Z, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	80 83       	st	Z, r24
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	08 95       	ret

000002da <I2C_0_do_I2C_DO_NACK_RESTART>:
 2da:	ec eb       	ldi	r30, 0xBC	; 188
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 6a       	ori	r24, 0xA0	; 160
 2e2:	80 83       	st	Z, r24
 2e4:	88 e0       	ldi	r24, 0x08	; 8
 2e6:	08 95       	ret

000002e8 <I2C_0_do_I2C_BUS_COLLISION>:
 2e8:	a8 e9       	ldi	r26, 0x98	; 152
 2ea:	b1 e0       	ldi	r27, 0x01	; 1
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	1b 96       	adiw	r26, 0x0b	; 11
 2f0:	8c 93       	st	X, r24
 2f2:	1b 97       	sbiw	r26, 0x0b	; 11
 2f4:	1e 96       	adiw	r26, 0x0e	; 14
 2f6:	ed 91       	ld	r30, X+
 2f8:	fc 91       	ld	r31, X
 2fa:	1f 97       	sbiw	r26, 0x0f	; 15
 2fc:	5a 96       	adiw	r26, 0x1a	; 26
 2fe:	8d 91       	ld	r24, X+
 300:	9c 91       	ld	r25, X
 302:	5b 97       	sbiw	r26, 0x1b	; 27
 304:	09 95       	icall
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	19 f0       	breq	.+6      	; 0x310 <I2C_0_do_I2C_BUS_COLLISION+0x28>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	21 f0       	breq	.+8      	; 0x316 <I2C_0_do_I2C_BUS_COLLISION+0x2e>
 30e:	06 c0       	rjmp	.+12     	; 0x31c <I2C_0_do_I2C_BUS_COLLISION+0x34>
 310:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_0_do_I2C_SEND_RESTART_READ>
 314:	08 95       	ret
 316:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_0_do_I2C_SEND_RESTART_WRITE>
 31a:	08 95       	ret
 31c:	0e 94 0c 01 	call	0x218	; 0x218 <I2C_0_do_I2C_RESET>
 320:	08 95       	ret

00000322 <I2C_0_do_I2C_BUS_ERROR>:
 322:	80 e9       	ldi	r24, 0x90	; 144
 324:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 328:	e8 e9       	ldi	r30, 0x98	; 152
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	80 81       	ld	r24, Z
 32e:	8e 7f       	andi	r24, 0xFE	; 254
 330:	80 83       	st	Z, r24
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	83 87       	std	Z+11, r24	; 0x0b
 336:	8e e0       	ldi	r24, 0x0E	; 14
 338:	08 95       	ret

0000033a <I2C_0_do_I2C_DO_NACK_STOP>:
 33a:	ec eb       	ldi	r30, 0xBC	; 188
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 69       	ori	r24, 0x90	; 144
 342:	80 83       	st	Z, r24
 344:	e8 e9       	ldi	r30, 0x98	; 152
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	80 81       	ld	r24, Z
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	80 83       	st	Z, r24
 34e:	13 86       	std	Z+11, r1	; 0x0b
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret

00000354 <I2C_0_do_I2C_RX>:
 354:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 358:	88 7f       	andi	r24, 0xF8	; 248
 35a:	80 35       	cpi	r24, 0x50	; 80
 35c:	41 f0       	breq	.+16     	; 0x36e <I2C_0_do_I2C_RX+0x1a>
 35e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 362:	88 7f       	andi	r24, 0xF8	; 248
 364:	88 35       	cpi	r24, 0x58	; 88
 366:	19 f0       	breq	.+6      	; 0x36e <I2C_0_do_I2C_RX+0x1a>
 368:	0e 94 0c 01 	call	0x218	; 0x218 <I2C_0_do_I2C_RESET>
 36c:	08 95       	ret
 36e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end+0x4>
 372:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x5>
 376:	02 97       	sbiw	r24, 0x02	; 2
 378:	31 f4       	brne	.+12     	; 0x386 <I2C_0_do_I2C_RX+0x32>
 37a:	ec eb       	ldi	r30, 0xBC	; 188
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8f 7b       	andi	r24, 0xBF	; 191
 382:	80 83       	st	Z, r24
 384:	05 c0       	rjmp	.+10     	; 0x390 <I2C_0_do_I2C_RX+0x3c>
 386:	ec eb       	ldi	r30, 0xBC	; 188
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	80 83       	st	Z, r24
 390:	e8 e9       	ldi	r30, 0x98	; 152
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	84 81       	ldd	r24, Z+4	; 0x04
 396:	95 81       	ldd	r25, Z+5	; 0x05
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	95 83       	std	Z+5, r25	; 0x05
 39c:	84 83       	std	Z+4, r24	; 0x04
 39e:	89 2b       	or	r24, r25
 3a0:	89 f0       	breq	.+34     	; 0x3c4 <I2C_0_do_I2C_RX+0x70>
 3a2:	a2 81       	ldd	r26, Z+2	; 0x02
 3a4:	b3 81       	ldd	r27, Z+3	; 0x03
 3a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3aa:	8c 93       	st	X, r24
 3ac:	82 81       	ldd	r24, Z+2	; 0x02
 3ae:	93 81       	ldd	r25, Z+3	; 0x03
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	93 83       	std	Z+3, r25	; 0x03
 3b4:	82 83       	std	Z+2, r24	; 0x02
 3b6:	ec eb       	ldi	r30, 0xBC	; 188
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	80 83       	st	Z, r24
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	08 95       	ret
 3c4:	a8 e9       	ldi	r26, 0x98	; 152
 3c6:	b1 e0       	ldi	r27, 0x01	; 1
 3c8:	12 96       	adiw	r26, 0x02	; 2
 3ca:	ed 91       	ld	r30, X+
 3cc:	fc 91       	ld	r31, X
 3ce:	13 97       	sbiw	r26, 0x03	; 3
 3d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3d4:	80 83       	st	Z, r24
 3d6:	12 96       	adiw	r26, 0x02	; 2
 3d8:	8d 91       	ld	r24, X+
 3da:	9c 91       	ld	r25, X
 3dc:	13 97       	sbiw	r26, 0x03	; 3
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	13 96       	adiw	r26, 0x03	; 3
 3e2:	9c 93       	st	X, r25
 3e4:	8e 93       	st	-X, r24
 3e6:	12 97       	sbiw	r26, 0x02	; 2
 3e8:	8c 91       	ld	r24, X
 3ea:	84 60       	ori	r24, 0x04	; 4
 3ec:	8c 93       	st	X, r24
 3ee:	1c 96       	adiw	r26, 0x0c	; 12
 3f0:	ed 91       	ld	r30, X+
 3f2:	fc 91       	ld	r31, X
 3f4:	1d 97       	sbiw	r26, 0x0d	; 13
 3f6:	58 96       	adiw	r26, 0x18	; 24
 3f8:	8d 91       	ld	r24, X+
 3fa:	9c 91       	ld	r25, X
 3fc:	59 97       	sbiw	r26, 0x19	; 25
 3fe:	09 95       	icall
 400:	82 50       	subi	r24, 0x02	; 2
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	18 f4       	brcc	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 406:	0e 94 6d 01 	call	0x2da	; 0x2da <I2C_0_do_I2C_DO_NACK_RESTART>
 40a:	08 95       	ret
 40c:	0e 94 9d 01 	call	0x33a	; 0x33a <I2C_0_do_I2C_DO_NACK_STOP>
 410:	08 95       	ret

00000412 <I2C_0_do_I2C_SEND_STOP>:
 412:	ec eb       	ldi	r30, 0xBC	; 188
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	80 69       	ori	r24, 0x90	; 144
 41a:	80 83       	st	Z, r24
 41c:	e8 e9       	ldi	r30, 0x98	; 152
 41e:	f1 e0       	ldi	r31, 0x01	; 1
 420:	80 81       	ld	r24, Z
 422:	8e 7f       	andi	r24, 0xFE	; 254
 424:	80 83       	st	Z, r24
 426:	13 86       	std	Z+11, r1	; 0x0b
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret

0000042c <I2C_0_do_I2C_DO_ADDRESS_NACK>:
 42c:	a8 e9       	ldi	r26, 0x98	; 152
 42e:	b1 e0       	ldi	r27, 0x01	; 1
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	1b 96       	adiw	r26, 0x0b	; 11
 434:	8c 93       	st	X, r24
 436:	1b 97       	sbiw	r26, 0x0b	; 11
 438:	50 96       	adiw	r26, 0x10	; 16
 43a:	ed 91       	ld	r30, X+
 43c:	fc 91       	ld	r31, X
 43e:	51 97       	sbiw	r26, 0x11	; 17
 440:	5c 96       	adiw	r26, 0x1c	; 28
 442:	8d 91       	ld	r24, X+
 444:	9c 91       	ld	r25, X
 446:	5d 97       	sbiw	r26, 0x1d	; 29
 448:	09 95       	icall
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	19 f0       	breq	.+6      	; 0x454 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x28>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	21 f0       	breq	.+8      	; 0x45a <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
 452:	06 c0       	rjmp	.+12     	; 0x460 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
 454:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_0_do_I2C_SEND_RESTART_READ>
 458:	08 95       	ret
 45a:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_0_do_I2C_SEND_RESTART_WRITE>
 45e:	08 95       	ret
 460:	0e 94 09 02 	call	0x412	; 0x412 <I2C_0_do_I2C_SEND_STOP>
 464:	08 95       	ret

00000466 <I2C_0_do_I2C_RX_DO_ACK>:
 466:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	80 34       	cpi	r24, 0x40	; 64
 46e:	19 f0       	breq	.+6      	; 0x476 <I2C_0_do_I2C_RX_DO_ACK+0x10>
 470:	0e 94 16 02 	call	0x42c	; 0x42c <I2C_0_do_I2C_DO_ADDRESS_NACK>
 474:	08 95       	ret
 476:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end+0x4>
 47a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x5>
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	39 f4       	brne	.+14     	; 0x490 <I2C_0_do_I2C_RX_DO_ACK+0x2a>
 482:	ec eb       	ldi	r30, 0xBC	; 188
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	8f 7b       	andi	r24, 0xBF	; 191
 48a:	80 83       	st	Z, r24
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	08 95       	ret
 490:	ec eb       	ldi	r30, 0xBC	; 188
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	80 64       	ori	r24, 0x40	; 64
 498:	80 83       	st	Z, r24
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	08 95       	ret

0000049e <I2C_0_do_I2C_TX_DO_ACK>:
 49e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4a2:	88 7f       	andi	r24, 0xF8	; 248
 4a4:	88 31       	cpi	r24, 0x18	; 24
 4a6:	19 f0       	breq	.+6      	; 0x4ae <I2C_0_do_I2C_TX_DO_ACK+0x10>
 4a8:	0e 94 16 02 	call	0x42c	; 0x42c <I2C_0_do_I2C_DO_ADDRESS_NACK>
 4ac:	08 95       	ret
 4ae:	83 e0       	ldi	r24, 0x03	; 3
 4b0:	08 95       	ret

000004b2 <I2C_0_do_I2C_TX>:
 4b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4b6:	88 7f       	andi	r24, 0xF8	; 248
 4b8:	80 33       	cpi	r24, 0x30	; 48
 4ba:	51 f0       	breq	.+20     	; 0x4d0 <I2C_0_do_I2C_TX+0x1e>
 4bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4c0:	88 7f       	andi	r24, 0xF8	; 248
 4c2:	88 34       	cpi	r24, 0x48	; 72
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <I2C_0_do_I2C_TX+0x1e>
 4c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4ca:	88 7f       	andi	r24, 0xF8	; 248
 4cc:	80 32       	cpi	r24, 0x20	; 32
 4ce:	c9 f4       	brne	.+50     	; 0x502 <I2C_0_do_I2C_TX+0x50>
 4d0:	a8 e9       	ldi	r26, 0x98	; 152
 4d2:	b1 e0       	ldi	r27, 0x01	; 1
 4d4:	52 96       	adiw	r26, 0x12	; 18
 4d6:	ed 91       	ld	r30, X+
 4d8:	fc 91       	ld	r31, X
 4da:	53 97       	sbiw	r26, 0x13	; 19
 4dc:	5e 96       	adiw	r26, 0x1e	; 30
 4de:	8d 91       	ld	r24, X+
 4e0:	9c 91       	ld	r25, X
 4e2:	5f 97       	sbiw	r26, 0x1f	; 31
 4e4:	09 95       	icall
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <I2C_0_do_I2C_TX+0x3e>
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <I2C_0_do_I2C_TX+0x44>
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <I2C_0_do_I2C_TX+0x4a>
 4f0:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_0_do_I2C_SEND_RESTART_READ>
 4f4:	08 95       	ret
 4f6:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_0_do_I2C_SEND_RESTART_WRITE>
 4fa:	08 95       	ret
 4fc:	0e 94 09 02 	call	0x412	; 0x412 <I2C_0_do_I2C_SEND_STOP>
 500:	08 95       	ret
 502:	e8 e9       	ldi	r30, 0x98	; 152
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	a2 81       	ldd	r26, Z+2	; 0x02
 508:	b3 81       	ldd	r27, Z+3	; 0x03
 50a:	cd 01       	movw	r24, r26
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	93 83       	std	Z+3, r25	; 0x03
 510:	82 83       	std	Z+2, r24	; 0x02
 512:	8c 91       	ld	r24, X
 514:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 518:	ac eb       	ldi	r26, 0xBC	; 188
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	8c 91       	ld	r24, X
 51e:	80 68       	ori	r24, 0x80	; 128
 520:	8c 93       	st	X, r24
 522:	84 81       	ldd	r24, Z+4	; 0x04
 524:	95 81       	ldd	r25, Z+5	; 0x05
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	95 83       	std	Z+5, r25	; 0x05
 52a:	84 83       	std	Z+4, r24	; 0x04
 52c:	89 2b       	or	r24, r25
 52e:	11 f4       	brne	.+4      	; 0x534 <I2C_0_do_I2C_TX+0x82>
 530:	85 e0       	ldi	r24, 0x05	; 5
 532:	08 95       	ret
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	08 95       	ret

00000538 <I2C_0_do_I2C_TX_EMPTY>:
 538:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 53c:	88 7f       	andi	r24, 0xF8	; 248
 53e:	80 33       	cpi	r24, 0x30	; 48
 540:	51 f0       	breq	.+20     	; 0x556 <I2C_0_do_I2C_TX_EMPTY+0x1e>
 542:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 546:	88 7f       	andi	r24, 0xF8	; 248
 548:	88 34       	cpi	r24, 0x48	; 72
 54a:	29 f0       	breq	.+10     	; 0x556 <I2C_0_do_I2C_TX_EMPTY+0x1e>
 54c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 550:	88 7f       	andi	r24, 0xF8	; 248
 552:	80 32       	cpi	r24, 0x20	; 32
 554:	c9 f4       	brne	.+50     	; 0x588 <I2C_0_do_I2C_TX_EMPTY+0x50>
 556:	a8 e9       	ldi	r26, 0x98	; 152
 558:	b1 e0       	ldi	r27, 0x01	; 1
 55a:	52 96       	adiw	r26, 0x12	; 18
 55c:	ed 91       	ld	r30, X+
 55e:	fc 91       	ld	r31, X
 560:	53 97       	sbiw	r26, 0x13	; 19
 562:	5e 96       	adiw	r26, 0x1e	; 30
 564:	8d 91       	ld	r24, X+
 566:	9c 91       	ld	r25, X
 568:	5f 97       	sbiw	r26, 0x1f	; 31
 56a:	09 95       	icall
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	19 f0       	breq	.+6      	; 0x576 <I2C_0_do_I2C_TX_EMPTY+0x3e>
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	21 f0       	breq	.+8      	; 0x57c <I2C_0_do_I2C_TX_EMPTY+0x44>
 574:	06 c0       	rjmp	.+12     	; 0x582 <I2C_0_do_I2C_TX_EMPTY+0x4a>
 576:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_0_do_I2C_SEND_RESTART_READ>
 57a:	08 95       	ret
 57c:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_0_do_I2C_SEND_RESTART_WRITE>
 580:	08 95       	ret
 582:	0e 94 09 02 	call	0x412	; 0x412 <I2C_0_do_I2C_SEND_STOP>
 586:	08 95       	ret
 588:	a8 e9       	ldi	r26, 0x98	; 152
 58a:	b1 e0       	ldi	r27, 0x01	; 1
 58c:	8c 91       	ld	r24, X
 58e:	84 60       	ori	r24, 0x04	; 4
 590:	8c 93       	st	X, r24
 592:	1c 96       	adiw	r26, 0x0c	; 12
 594:	ed 91       	ld	r30, X+
 596:	fc 91       	ld	r31, X
 598:	1d 97       	sbiw	r26, 0x0d	; 13
 59a:	58 96       	adiw	r26, 0x18	; 24
 59c:	8d 91       	ld	r24, X+
 59e:	9c 91       	ld	r25, X
 5a0:	59 97       	sbiw	r26, 0x19	; 25
 5a2:	09 95       	icall
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	39 f0       	breq	.+14     	; 0x5b6 <I2C_0_do_I2C_TX_EMPTY+0x7e>
 5a8:	84 30       	cpi	r24, 0x04	; 4
 5aa:	41 f0       	breq	.+16     	; 0x5bc <I2C_0_do_I2C_TX_EMPTY+0x84>
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	49 f4       	brne	.+18     	; 0x5c2 <I2C_0_do_I2C_TX_EMPTY+0x8a>
 5b0:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_0_do_I2C_SEND_RESTART_READ>
 5b4:	08 95       	ret
 5b6:	0e 94 26 01 	call	0x24c	; 0x24c <I2C_0_do_I2C_SEND_RESTART_WRITE>
 5ba:	08 95       	ret
 5bc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <I2C_0_do_I2C_TX>
 5c0:	08 95       	ret
 5c2:	0e 94 09 02 	call	0x412	; 0x412 <I2C_0_do_I2C_SEND_STOP>
 5c6:	08 95       	ret

000005c8 <I2C_0_init>:
 5c8:	e4 e6       	ldi	r30, 0x64	; 100
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	8f 77       	andi	r24, 0x7F	; 127
 5d0:	80 83       	st	Z, r24
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5d8:	80 e2       	ldi	r24, 0x20	; 32
 5da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 5de:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5e2:	08 95       	ret

000005e4 <__vector_26>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_vect)
{
 5e4:	1f 92       	push	r1
 5e6:	0f 92       	push	r0
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
{

	// NOTE: We are ignoring the Write Collision flag.

	// Bus arbitration lost to another master, override next state
	if (((TWSR0 & 0xF8) == 0x38) || ((TWSR0 & 0xF8) == 0x68) || ((TWSR0 & 0xF8) == 0x78) || ((TWSR0 & 0xF8) == 0xB0)) {
 60a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 60e:	88 7f       	andi	r24, 0xF8	; 248
 610:	88 33       	cpi	r24, 0x38	; 56
 612:	79 f0       	breq	.+30     	; 0x632 <__vector_26+0x4e>
 614:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 618:	88 7f       	andi	r24, 0xF8	; 248
 61a:	88 36       	cpi	r24, 0x68	; 104
 61c:	51 f0       	breq	.+20     	; 0x632 <__vector_26+0x4e>
 61e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 622:	88 7f       	andi	r24, 0xF8	; 248
 624:	88 37       	cpi	r24, 0x78	; 120
 626:	29 f0       	breq	.+10     	; 0x632 <__vector_26+0x4e>
 628:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 62c:	88 7f       	andi	r24, 0xF8	; 248
 62e:	80 3b       	cpi	r24, 0xB0	; 176
 630:	19 f4       	brne	.+6      	; 0x638 <__vector_26+0x54>
		I2C_0_status.state = I2C_BUS_COLLISION; // State Override
 632:	80 e1       	ldi	r24, 0x10	; 16
 634:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end+0xa>
	}

	I2C_0_status.state = I2C_0_fsmStateTable[I2C_0_status.state]();
 638:	c8 e9       	ldi	r28, 0x98	; 152
 63a:	d1 e0       	ldi	r29, 0x01	; 1
 63c:	ea 85       	ldd	r30, Y+10	; 0x0a
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	e0 50       	subi	r30, 0x00	; 0
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	01 90       	ld	r0, Z+
 64a:	f0 81       	ld	r31, Z
 64c:	e0 2d       	mov	r30, r0
 64e:	09 95       	icall
 650:	8a 87       	std	Y+10, r24	; 0x0a
};

ISR(TWI0_vect)
{
	I2C_0_master_isr();
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 678:	2f b7       	in	r18, 0x3f	; 63
	cli
 67a:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 67c:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 67e:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 680:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 682:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 684:	08 95       	ret

00000686 <SPI_0_init>:
 * \retval false SPI bus is not DONE
 */
bool SPI_0_status_done()
{
	return (SPI_0_desc.status == SPI_DONE);
}
 686:	e4 e6       	ldi	r30, 0x64	; 100
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	8b 7f       	andi	r24, 0xFB	; 251
 68e:	80 83       	st	Z, r24
 690:	80 ed       	ldi	r24, 0xD0	; 208
 692:	8c bd       	out	0x2c, r24	; 44
 694:	ec eb       	ldi	r30, 0xBC	; 188
 696:	f1 e0       	ldi	r31, 0x01	; 1
 698:	10 82       	st	Z, r1
 69a:	16 82       	std	Z+6, r1	; 0x06
 69c:	15 82       	std	Z+5, r1	; 0x05
 69e:	08 95       	ret

000006a0 <__vector_19>:
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
 6c6:	9e b5       	in	r25, 0x2e	; 46
 6c8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <SPI_0_desc+0x4>
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	11 f1       	breq	.+68     	; 0x714 <__vector_19+0x74>
 6d0:	cc eb       	ldi	r28, 0xBC	; 188
 6d2:	d1 e0       	ldi	r29, 0x01	; 1
 6d4:	a9 81       	ldd	r26, Y+1	; 0x01
 6d6:	ba 81       	ldd	r27, Y+2	; 0x02
 6d8:	fd 01       	movw	r30, r26
 6da:	91 93       	st	Z+, r25
 6dc:	fa 83       	std	Y+2, r31	; 0x02
 6de:	e9 83       	std	Y+1, r30	; 0x01
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	19 f0       	breq	.+6      	; 0x6ea <__vector_19+0x4a>
 6e4:	11 96       	adiw	r26, 0x01	; 1
 6e6:	9c 91       	ld	r25, X
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <__vector_19+0x4c>
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	ec eb       	ldi	r30, 0xBC	; 188
 6ee:	f1 e0       	ldi	r31, 0x01	; 1
 6f0:	83 81       	ldd	r24, Z+3	; 0x03
 6f2:	81 50       	subi	r24, 0x01	; 1
 6f4:	83 83       	std	Z+3, r24	; 0x03
 6f6:	88 23       	and	r24, r24
 6f8:	11 f0       	breq	.+4      	; 0x6fe <__vector_19+0x5e>
 6fa:	9e bd       	out	0x2e, r25	; 46
 6fc:	14 c0       	rjmp	.+40     	; 0x726 <__vector_19+0x86>
 6fe:	ec eb       	ldi	r30, 0xBC	; 188
 700:	f1 e0       	ldi	r31, 0x01	; 1
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	80 83       	st	Z, r24
 706:	05 80       	ldd	r0, Z+5	; 0x05
 708:	f6 81       	ldd	r31, Z+6	; 0x06
 70a:	e0 2d       	mov	r30, r0
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	59 f0       	breq	.+22     	; 0x726 <__vector_19+0x86>
 710:	09 95       	icall
 712:	09 c0       	rjmp	.+18     	; 0x726 <__vector_19+0x86>
 714:	ec eb       	ldi	r30, 0xBC	; 188
 716:	f1 e0       	ldi	r31, 0x01	; 1
 718:	a1 81       	ldd	r26, Z+1	; 0x01
 71a:	b2 81       	ldd	r27, Z+2	; 0x02
 71c:	cd 01       	movw	r24, r26
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	92 83       	std	Z+2, r25	; 0x02
 722:	81 83       	std	Z+1, r24	; 0x01
 724:	df cf       	rjmp	.-66     	; 0x6e4 <__vector_19+0x44>
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	bf 91       	pop	r27
 730:	af 91       	pop	r26
 732:	9f 91       	pop	r25
 734:	8f 91       	pop	r24
 736:	7f 91       	pop	r23
 738:	6f 91       	pop	r22
 73a:	5f 91       	pop	r21
 73c:	4f 91       	pop	r20
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <SPI_0_exchange_byte>:

uint8_t SPI_0_exchange_byte(uint8_t data)
{
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	1f 92       	push	r1
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	89 83       	std	Y+1, r24	; 0x01
	SPI_0_desc.data   = (uint8_t *)&data;
 758:	ec eb       	ldi	r30, 0xBC	; 188
 75a:	f1 e0       	ldi	r31, 0x01	; 1
 75c:	9e 01       	movw	r18, r28
 75e:	2f 5f       	subi	r18, 0xFF	; 255
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	32 83       	std	Z+2, r19	; 0x02
 764:	21 83       	std	Z+1, r18	; 0x01
	SPI_0_desc.size   = 1;
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	93 83       	std	Z+3, r25	; 0x03
	SPI_0_desc.type   = SPI_READ;
 76a:	94 83       	std	Z+4, r25	; 0x04
	SPI_0_desc.status = SPI_BUSY;
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	90 83       	st	Z, r25

	SPDR0 = *SPI_0_desc.data;
 770:	8e bd       	out	0x2e, r24	; 46
	while (SPI_0_desc.status == SPI_BUSY)
 772:	80 81       	ld	r24, Z
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	f1 f3       	breq	.-4      	; 0x774 <SPI_0_exchange_byte+0x28>
		;
	return data;
}
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	0f 90       	pop	r0
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR1A & (1 << RXC)))
		;
	return UDR1;
}
 782:	e4 e6       	ldi	r30, 0x64	; 100
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	8f 7e       	andi	r24, 0xEF	; 239
 78a:	80 83       	st	Z, r24
 78c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 790:	80 e1       	ldi	r24, 0x10	; 16
 792:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 79c:	88 e9       	ldi	r24, 0x98	; 152
 79e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 7a2:	84 e2       	ldi	r24, 0x24	; 36
 7a4:	91 e0       	ldi	r25, 0x01	; 1
 7a6:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <__iob+0x3>
 7aa:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <__iob+0x2>
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR1A & (1 << UDRE)))
 7b2:	e8 ec       	ldi	r30, 0xC8	; 200
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	90 81       	ld	r25, Z
 7b8:	95 ff       	sbrs	r25, 5
 7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <USART_0_write+0x4>
		;
	UDR1 = data;
 7bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 7c0:	08 95       	ret

000007c2 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 7c2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_0_write>
	return 0;
}
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	08 95       	ret

000007cc <printf>:
 7cc:	a0 e0       	ldi	r26, 0x00	; 0
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	ec ee       	ldi	r30, 0xEC	; 236
 7d2:	f3 e0       	ldi	r31, 0x03	; 3
 7d4:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__prologue_saves__+0x20>
 7d8:	ae 01       	movw	r20, r28
 7da:	4b 5f       	subi	r20, 0xFB	; 251
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255
 7de:	fa 01       	movw	r30, r20
 7e0:	61 91       	ld	r22, Z+
 7e2:	71 91       	ld	r23, Z+
 7e4:	af 01       	movw	r20, r30
 7e6:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <__iob+0x2>
 7ea:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <__iob+0x3>
 7ee:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <vfprintf>
 7f2:	e2 e0       	ldi	r30, 0x02	; 2
 7f4:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__epilogue_restores__+0x20>

000007f8 <vfprintf>:
 7f8:	ab e0       	ldi	r26, 0x0B	; 11
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e2 e0       	ldi	r30, 0x02	; 2
 7fe:	f4 e0       	ldi	r31, 0x04	; 4
 800:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__prologue_saves__>
 804:	6c 01       	movw	r12, r24
 806:	7b 01       	movw	r14, r22
 808:	8a 01       	movw	r16, r20
 80a:	fc 01       	movw	r30, r24
 80c:	17 82       	std	Z+7, r1	; 0x07
 80e:	16 82       	std	Z+6, r1	; 0x06
 810:	83 81       	ldd	r24, Z+3	; 0x03
 812:	81 ff       	sbrs	r24, 1
 814:	cc c1       	rjmp	.+920    	; 0xbae <__stack+0x2af>
 816:	ce 01       	movw	r24, r28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	3c 01       	movw	r6, r24
 81c:	f6 01       	movw	r30, r12
 81e:	93 81       	ldd	r25, Z+3	; 0x03
 820:	f7 01       	movw	r30, r14
 822:	93 fd       	sbrc	r25, 3
 824:	85 91       	lpm	r24, Z+
 826:	93 ff       	sbrs	r25, 3
 828:	81 91       	ld	r24, Z+
 82a:	7f 01       	movw	r14, r30
 82c:	88 23       	and	r24, r24
 82e:	09 f4       	brne	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 830:	ba c1       	rjmp	.+884    	; 0xba6 <__stack+0x2a7>
 832:	85 32       	cpi	r24, 0x25	; 37
 834:	39 f4       	brne	.+14     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 836:	93 fd       	sbrc	r25, 3
 838:	85 91       	lpm	r24, Z+
 83a:	93 ff       	sbrs	r25, 3
 83c:	81 91       	ld	r24, Z+
 83e:	7f 01       	movw	r14, r30
 840:	85 32       	cpi	r24, 0x25	; 37
 842:	29 f4       	brne	.+10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 844:	b6 01       	movw	r22, r12
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 84c:	e7 cf       	rjmp	.-50     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 84e:	91 2c       	mov	r9, r1
 850:	21 2c       	mov	r2, r1
 852:	31 2c       	mov	r3, r1
 854:	ff e1       	ldi	r31, 0x1F	; 31
 856:	f3 15       	cp	r31, r3
 858:	d8 f0       	brcs	.+54     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 85a:	8b 32       	cpi	r24, 0x2B	; 43
 85c:	79 f0       	breq	.+30     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 85e:	38 f4       	brcc	.+14     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 860:	80 32       	cpi	r24, 0x20	; 32
 862:	79 f0       	breq	.+30     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 864:	83 32       	cpi	r24, 0x23	; 35
 866:	a1 f4       	brne	.+40     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 868:	23 2d       	mov	r18, r3
 86a:	20 61       	ori	r18, 0x10	; 16
 86c:	1d c0       	rjmp	.+58     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 86e:	8d 32       	cpi	r24, 0x2D	; 45
 870:	61 f0       	breq	.+24     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 872:	80 33       	cpi	r24, 0x30	; 48
 874:	69 f4       	brne	.+26     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 876:	23 2d       	mov	r18, r3
 878:	21 60       	ori	r18, 0x01	; 1
 87a:	16 c0       	rjmp	.+44     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 87c:	83 2d       	mov	r24, r3
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	38 2e       	mov	r3, r24
 882:	e3 2d       	mov	r30, r3
 884:	e4 60       	ori	r30, 0x04	; 4
 886:	3e 2e       	mov	r3, r30
 888:	2a c0       	rjmp	.+84     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 88a:	f3 2d       	mov	r31, r3
 88c:	f8 60       	ori	r31, 0x08	; 8
 88e:	1d c0       	rjmp	.+58     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 890:	37 fc       	sbrc	r3, 7
 892:	2d c0       	rjmp	.+90     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 894:	20 ed       	ldi	r18, 0xD0	; 208
 896:	28 0f       	add	r18, r24
 898:	2a 30       	cpi	r18, 0x0A	; 10
 89a:	40 f0       	brcs	.+16     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 89c:	8e 32       	cpi	r24, 0x2E	; 46
 89e:	b9 f4       	brne	.+46     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8a0:	36 fc       	sbrc	r3, 6
 8a2:	81 c1       	rjmp	.+770    	; 0xba6 <__stack+0x2a7>
 8a4:	23 2d       	mov	r18, r3
 8a6:	20 64       	ori	r18, 0x40	; 64
 8a8:	32 2e       	mov	r3, r18
 8aa:	19 c0       	rjmp	.+50     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8ac:	36 fe       	sbrs	r3, 6
 8ae:	06 c0       	rjmp	.+12     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b0:	8a e0       	ldi	r24, 0x0A	; 10
 8b2:	98 9e       	mul	r9, r24
 8b4:	20 0d       	add	r18, r0
 8b6:	11 24       	eor	r1, r1
 8b8:	92 2e       	mov	r9, r18
 8ba:	11 c0       	rjmp	.+34     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8bc:	ea e0       	ldi	r30, 0x0A	; 10
 8be:	2e 9e       	mul	r2, r30
 8c0:	20 0d       	add	r18, r0
 8c2:	11 24       	eor	r1, r1
 8c4:	22 2e       	mov	r2, r18
 8c6:	f3 2d       	mov	r31, r3
 8c8:	f0 62       	ori	r31, 0x20	; 32
 8ca:	3f 2e       	mov	r3, r31
 8cc:	08 c0       	rjmp	.+16     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8ce:	8c 36       	cpi	r24, 0x6C	; 108
 8d0:	21 f4       	brne	.+8      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d2:	83 2d       	mov	r24, r3
 8d4:	80 68       	ori	r24, 0x80	; 128
 8d6:	38 2e       	mov	r3, r24
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8da:	88 36       	cpi	r24, 0x68	; 104
 8dc:	41 f4       	brne	.+16     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8de:	f7 01       	movw	r30, r14
 8e0:	93 fd       	sbrc	r25, 3
 8e2:	85 91       	lpm	r24, Z+
 8e4:	93 ff       	sbrs	r25, 3
 8e6:	81 91       	ld	r24, Z+
 8e8:	7f 01       	movw	r14, r30
 8ea:	81 11       	cpse	r24, r1
 8ec:	b3 cf       	rjmp	.-154    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 8ee:	98 2f       	mov	r25, r24
 8f0:	9f 7d       	andi	r25, 0xDF	; 223
 8f2:	95 54       	subi	r25, 0x45	; 69
 8f4:	93 30       	cpi	r25, 0x03	; 3
 8f6:	28 f4       	brcc	.+10     	; 0x902 <__stack+0x3>
 8f8:	0c 5f       	subi	r16, 0xFC	; 252
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	9f e3       	ldi	r25, 0x3F	; 63
 8fe:	99 83       	std	Y+1, r25	; 0x01
 900:	0d c0       	rjmp	.+26     	; 0x91c <__stack+0x1d>
 902:	83 36       	cpi	r24, 0x63	; 99
 904:	31 f0       	breq	.+12     	; 0x912 <__stack+0x13>
 906:	83 37       	cpi	r24, 0x73	; 115
 908:	71 f0       	breq	.+28     	; 0x926 <__stack+0x27>
 90a:	83 35       	cpi	r24, 0x53	; 83
 90c:	09 f0       	breq	.+2      	; 0x910 <__stack+0x11>
 90e:	59 c0       	rjmp	.+178    	; 0x9c2 <__stack+0xc3>
 910:	21 c0       	rjmp	.+66     	; 0x954 <__stack+0x55>
 912:	f8 01       	movw	r30, r16
 914:	80 81       	ld	r24, Z
 916:	89 83       	std	Y+1, r24	; 0x01
 918:	0e 5f       	subi	r16, 0xFE	; 254
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	88 24       	eor	r8, r8
 91e:	83 94       	inc	r8
 920:	91 2c       	mov	r9, r1
 922:	53 01       	movw	r10, r6
 924:	13 c0       	rjmp	.+38     	; 0x94c <__stack+0x4d>
 926:	28 01       	movw	r4, r16
 928:	f2 e0       	ldi	r31, 0x02	; 2
 92a:	4f 0e       	add	r4, r31
 92c:	51 1c       	adc	r5, r1
 92e:	f8 01       	movw	r30, r16
 930:	a0 80       	ld	r10, Z
 932:	b1 80       	ldd	r11, Z+1	; 0x01
 934:	36 fe       	sbrs	r3, 6
 936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0x3f>
 938:	69 2d       	mov	r22, r9
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
 93e:	6f ef       	ldi	r22, 0xFF	; 255
 940:	7f ef       	ldi	r23, 0xFF	; 255
 942:	c5 01       	movw	r24, r10
 944:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strnlen>
 948:	4c 01       	movw	r8, r24
 94a:	82 01       	movw	r16, r4
 94c:	f3 2d       	mov	r31, r3
 94e:	ff 77       	andi	r31, 0x7F	; 127
 950:	3f 2e       	mov	r3, r31
 952:	16 c0       	rjmp	.+44     	; 0x980 <__stack+0x81>
 954:	28 01       	movw	r4, r16
 956:	22 e0       	ldi	r18, 0x02	; 2
 958:	42 0e       	add	r4, r18
 95a:	51 1c       	adc	r5, r1
 95c:	f8 01       	movw	r30, r16
 95e:	a0 80       	ld	r10, Z
 960:	b1 80       	ldd	r11, Z+1	; 0x01
 962:	36 fe       	sbrs	r3, 6
 964:	03 c0       	rjmp	.+6      	; 0x96c <__stack+0x6d>
 966:	69 2d       	mov	r22, r9
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
 96c:	6f ef       	ldi	r22, 0xFF	; 255
 96e:	7f ef       	ldi	r23, 0xFF	; 255
 970:	c5 01       	movw	r24, r10
 972:	0e 94 dd 05 	call	0xbba	; 0xbba <strnlen_P>
 976:	4c 01       	movw	r8, r24
 978:	f3 2d       	mov	r31, r3
 97a:	f0 68       	ori	r31, 0x80	; 128
 97c:	3f 2e       	mov	r3, r31
 97e:	82 01       	movw	r16, r4
 980:	33 fc       	sbrc	r3, 3
 982:	1b c0       	rjmp	.+54     	; 0x9ba <__stack+0xbb>
 984:	82 2d       	mov	r24, r2
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	88 16       	cp	r8, r24
 98a:	99 06       	cpc	r9, r25
 98c:	b0 f4       	brcc	.+44     	; 0x9ba <__stack+0xbb>
 98e:	b6 01       	movw	r22, r12
 990:	80 e2       	ldi	r24, 0x20	; 32
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 998:	2a 94       	dec	r2
 99a:	f4 cf       	rjmp	.-24     	; 0x984 <__stack+0x85>
 99c:	f5 01       	movw	r30, r10
 99e:	37 fc       	sbrc	r3, 7
 9a0:	85 91       	lpm	r24, Z+
 9a2:	37 fe       	sbrs	r3, 7
 9a4:	81 91       	ld	r24, Z+
 9a6:	5f 01       	movw	r10, r30
 9a8:	b6 01       	movw	r22, r12
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 9b0:	21 10       	cpse	r2, r1
 9b2:	2a 94       	dec	r2
 9b4:	21 e0       	ldi	r18, 0x01	; 1
 9b6:	82 1a       	sub	r8, r18
 9b8:	91 08       	sbc	r9, r1
 9ba:	81 14       	cp	r8, r1
 9bc:	91 04       	cpc	r9, r1
 9be:	71 f7       	brne	.-36     	; 0x99c <__stack+0x9d>
 9c0:	e8 c0       	rjmp	.+464    	; 0xb92 <__stack+0x293>
 9c2:	84 36       	cpi	r24, 0x64	; 100
 9c4:	11 f0       	breq	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	89 36       	cpi	r24, 0x69	; 105
 9c8:	41 f5       	brne	.+80     	; 0xa1a <__stack+0x11b>
 9ca:	f8 01       	movw	r30, r16
 9cc:	37 fe       	sbrs	r3, 7
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <__stack+0xdf>
 9d0:	60 81       	ld	r22, Z
 9d2:	71 81       	ldd	r23, Z+1	; 0x01
 9d4:	82 81       	ldd	r24, Z+2	; 0x02
 9d6:	93 81       	ldd	r25, Z+3	; 0x03
 9d8:	0c 5f       	subi	r16, 0xFC	; 252
 9da:	1f 4f       	sbci	r17, 0xFF	; 255
 9dc:	08 c0       	rjmp	.+16     	; 0x9ee <__stack+0xef>
 9de:	60 81       	ld	r22, Z
 9e0:	71 81       	ldd	r23, Z+1	; 0x01
 9e2:	07 2e       	mov	r0, r23
 9e4:	00 0c       	add	r0, r0
 9e6:	88 0b       	sbc	r24, r24
 9e8:	99 0b       	sbc	r25, r25
 9ea:	0e 5f       	subi	r16, 0xFE	; 254
 9ec:	1f 4f       	sbci	r17, 0xFF	; 255
 9ee:	f3 2d       	mov	r31, r3
 9f0:	ff 76       	andi	r31, 0x6F	; 111
 9f2:	3f 2e       	mov	r3, r31
 9f4:	97 ff       	sbrs	r25, 7
 9f6:	09 c0       	rjmp	.+18     	; 0xa0a <__stack+0x10b>
 9f8:	90 95       	com	r25
 9fa:	80 95       	com	r24
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	f0 68       	ori	r31, 0x80	; 128
 a08:	3f 2e       	mov	r3, r31
 a0a:	2a e0       	ldi	r18, 0x0A	; 10
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	a3 01       	movw	r20, r6
 a10:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__ultoa_invert>
 a14:	88 2e       	mov	r8, r24
 a16:	86 18       	sub	r8, r6
 a18:	45 c0       	rjmp	.+138    	; 0xaa4 <__stack+0x1a5>
 a1a:	85 37       	cpi	r24, 0x75	; 117
 a1c:	31 f4       	brne	.+12     	; 0xa2a <__stack+0x12b>
 a1e:	23 2d       	mov	r18, r3
 a20:	2f 7e       	andi	r18, 0xEF	; 239
 a22:	b2 2e       	mov	r11, r18
 a24:	2a e0       	ldi	r18, 0x0A	; 10
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	25 c0       	rjmp	.+74     	; 0xa74 <__stack+0x175>
 a2a:	93 2d       	mov	r25, r3
 a2c:	99 7f       	andi	r25, 0xF9	; 249
 a2e:	b9 2e       	mov	r11, r25
 a30:	8f 36       	cpi	r24, 0x6F	; 111
 a32:	c1 f0       	breq	.+48     	; 0xa64 <__stack+0x165>
 a34:	18 f4       	brcc	.+6      	; 0xa3c <__stack+0x13d>
 a36:	88 35       	cpi	r24, 0x58	; 88
 a38:	79 f0       	breq	.+30     	; 0xa58 <__stack+0x159>
 a3a:	b5 c0       	rjmp	.+362    	; 0xba6 <__stack+0x2a7>
 a3c:	80 37       	cpi	r24, 0x70	; 112
 a3e:	19 f0       	breq	.+6      	; 0xa46 <__stack+0x147>
 a40:	88 37       	cpi	r24, 0x78	; 120
 a42:	21 f0       	breq	.+8      	; 0xa4c <__stack+0x14d>
 a44:	b0 c0       	rjmp	.+352    	; 0xba6 <__stack+0x2a7>
 a46:	e9 2f       	mov	r30, r25
 a48:	e0 61       	ori	r30, 0x10	; 16
 a4a:	be 2e       	mov	r11, r30
 a4c:	b4 fe       	sbrs	r11, 4
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__stack+0x16b>
 a50:	fb 2d       	mov	r31, r11
 a52:	f4 60       	ori	r31, 0x04	; 4
 a54:	bf 2e       	mov	r11, r31
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <__stack+0x16b>
 a58:	34 fe       	sbrs	r3, 4
 a5a:	0a c0       	rjmp	.+20     	; 0xa70 <__stack+0x171>
 a5c:	29 2f       	mov	r18, r25
 a5e:	26 60       	ori	r18, 0x06	; 6
 a60:	b2 2e       	mov	r11, r18
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <__stack+0x171>
 a64:	28 e0       	ldi	r18, 0x08	; 8
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <__stack+0x175>
 a6a:	20 e1       	ldi	r18, 0x10	; 16
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x175>
 a70:	20 e1       	ldi	r18, 0x10	; 16
 a72:	32 e0       	ldi	r19, 0x02	; 2
 a74:	f8 01       	movw	r30, r16
 a76:	b7 fe       	sbrs	r11, 7
 a78:	07 c0       	rjmp	.+14     	; 0xa88 <__stack+0x189>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	0c 5f       	subi	r16, 0xFC	; 252
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <__stack+0x195>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 5f       	subi	r16, 0xFE	; 254
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	a3 01       	movw	r20, r6
 a96:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__ultoa_invert>
 a9a:	88 2e       	mov	r8, r24
 a9c:	86 18       	sub	r8, r6
 a9e:	fb 2d       	mov	r31, r11
 aa0:	ff 77       	andi	r31, 0x7F	; 127
 aa2:	3f 2e       	mov	r3, r31
 aa4:	36 fe       	sbrs	r3, 6
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <__stack+0x1c3>
 aa8:	23 2d       	mov	r18, r3
 aaa:	2e 7f       	andi	r18, 0xFE	; 254
 aac:	a2 2e       	mov	r10, r18
 aae:	89 14       	cp	r8, r9
 ab0:	58 f4       	brcc	.+22     	; 0xac8 <__stack+0x1c9>
 ab2:	34 fe       	sbrs	r3, 4
 ab4:	0b c0       	rjmp	.+22     	; 0xacc <__stack+0x1cd>
 ab6:	32 fc       	sbrc	r3, 2
 ab8:	09 c0       	rjmp	.+18     	; 0xacc <__stack+0x1cd>
 aba:	83 2d       	mov	r24, r3
 abc:	8e 7e       	andi	r24, 0xEE	; 238
 abe:	a8 2e       	mov	r10, r24
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <__stack+0x1cd>
 ac2:	b8 2c       	mov	r11, r8
 ac4:	a3 2c       	mov	r10, r3
 ac6:	03 c0       	rjmp	.+6      	; 0xace <__stack+0x1cf>
 ac8:	b8 2c       	mov	r11, r8
 aca:	01 c0       	rjmp	.+2      	; 0xace <__stack+0x1cf>
 acc:	b9 2c       	mov	r11, r9
 ace:	a4 fe       	sbrs	r10, 4
 ad0:	0f c0       	rjmp	.+30     	; 0xaf0 <__stack+0x1f1>
 ad2:	fe 01       	movw	r30, r28
 ad4:	e8 0d       	add	r30, r8
 ad6:	f1 1d       	adc	r31, r1
 ad8:	80 81       	ld	r24, Z
 ada:	80 33       	cpi	r24, 0x30	; 48
 adc:	21 f4       	brne	.+8      	; 0xae6 <__stack+0x1e7>
 ade:	9a 2d       	mov	r25, r10
 ae0:	99 7e       	andi	r25, 0xE9	; 233
 ae2:	a9 2e       	mov	r10, r25
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__stack+0x1f9>
 ae6:	a2 fe       	sbrs	r10, 2
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <__stack+0x1f7>
 aea:	b3 94       	inc	r11
 aec:	b3 94       	inc	r11
 aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__stack+0x1f9>
 af0:	8a 2d       	mov	r24, r10
 af2:	86 78       	andi	r24, 0x86	; 134
 af4:	09 f0       	breq	.+2      	; 0xaf8 <__stack+0x1f9>
 af6:	b3 94       	inc	r11
 af8:	a3 fc       	sbrc	r10, 3
 afa:	11 c0       	rjmp	.+34     	; 0xb1e <__stack+0x21f>
 afc:	a0 fe       	sbrs	r10, 0
 afe:	06 c0       	rjmp	.+12     	; 0xb0c <__stack+0x20d>
 b00:	b2 14       	cp	r11, r2
 b02:	88 f4       	brcc	.+34     	; 0xb26 <__stack+0x227>
 b04:	28 0c       	add	r2, r8
 b06:	92 2c       	mov	r9, r2
 b08:	9b 18       	sub	r9, r11
 b0a:	0e c0       	rjmp	.+28     	; 0xb28 <__stack+0x229>
 b0c:	b2 14       	cp	r11, r2
 b0e:	60 f4       	brcc	.+24     	; 0xb28 <__stack+0x229>
 b10:	b6 01       	movw	r22, r12
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 b1a:	b3 94       	inc	r11
 b1c:	f7 cf       	rjmp	.-18     	; 0xb0c <__stack+0x20d>
 b1e:	b2 14       	cp	r11, r2
 b20:	18 f4       	brcc	.+6      	; 0xb28 <__stack+0x229>
 b22:	2b 18       	sub	r2, r11
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <__stack+0x22b>
 b26:	98 2c       	mov	r9, r8
 b28:	21 2c       	mov	r2, r1
 b2a:	a4 fe       	sbrs	r10, 4
 b2c:	10 c0       	rjmp	.+32     	; 0xb4e <__stack+0x24f>
 b2e:	b6 01       	movw	r22, r12
 b30:	80 e3       	ldi	r24, 0x30	; 48
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 b38:	a2 fe       	sbrs	r10, 2
 b3a:	17 c0       	rjmp	.+46     	; 0xb6a <__stack+0x26b>
 b3c:	a1 fc       	sbrc	r10, 1
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <__stack+0x247>
 b40:	88 e7       	ldi	r24, 0x78	; 120
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <__stack+0x24b>
 b46:	88 e5       	ldi	r24, 0x58	; 88
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	b6 01       	movw	r22, r12
 b4c:	0c c0       	rjmp	.+24     	; 0xb66 <__stack+0x267>
 b4e:	8a 2d       	mov	r24, r10
 b50:	86 78       	andi	r24, 0x86	; 134
 b52:	59 f0       	breq	.+22     	; 0xb6a <__stack+0x26b>
 b54:	a1 fe       	sbrs	r10, 1
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <__stack+0x25d>
 b58:	8b e2       	ldi	r24, 0x2B	; 43
 b5a:	01 c0       	rjmp	.+2      	; 0xb5e <__stack+0x25f>
 b5c:	80 e2       	ldi	r24, 0x20	; 32
 b5e:	a7 fc       	sbrc	r10, 7
 b60:	8d e2       	ldi	r24, 0x2D	; 45
 b62:	b6 01       	movw	r22, r12
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 b6a:	89 14       	cp	r8, r9
 b6c:	38 f4       	brcc	.+14     	; 0xb7c <__stack+0x27d>
 b6e:	b6 01       	movw	r22, r12
 b70:	80 e3       	ldi	r24, 0x30	; 48
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 b78:	9a 94       	dec	r9
 b7a:	f7 cf       	rjmp	.-18     	; 0xb6a <__stack+0x26b>
 b7c:	8a 94       	dec	r8
 b7e:	f3 01       	movw	r30, r6
 b80:	e8 0d       	add	r30, r8
 b82:	f1 1d       	adc	r31, r1
 b84:	80 81       	ld	r24, Z
 b86:	b6 01       	movw	r22, r12
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 b8e:	81 10       	cpse	r8, r1
 b90:	f5 cf       	rjmp	.-22     	; 0xb7c <__stack+0x27d>
 b92:	22 20       	and	r2, r2
 b94:	09 f4       	brne	.+2      	; 0xb98 <__stack+0x299>
 b96:	42 ce       	rjmp	.-892    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 b98:	b6 01       	movw	r22, r12
 b9a:	80 e2       	ldi	r24, 0x20	; 32
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fputc>
 ba2:	2a 94       	dec	r2
 ba4:	f6 cf       	rjmp	.-20     	; 0xb92 <__stack+0x293>
 ba6:	f6 01       	movw	r30, r12
 ba8:	86 81       	ldd	r24, Z+6	; 0x06
 baa:	97 81       	ldd	r25, Z+7	; 0x07
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <__stack+0x2b3>
 bae:	8f ef       	ldi	r24, 0xFF	; 255
 bb0:	9f ef       	ldi	r25, 0xFF	; 255
 bb2:	2b 96       	adiw	r28, 0x0b	; 11
 bb4:	e2 e1       	ldi	r30, 0x12	; 18
 bb6:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__epilogue_restores__>

00000bba <strnlen_P>:
 bba:	fc 01       	movw	r30, r24
 bbc:	05 90       	lpm	r0, Z+
 bbe:	61 50       	subi	r22, 0x01	; 1
 bc0:	70 40       	sbci	r23, 0x00	; 0
 bc2:	01 10       	cpse	r0, r1
 bc4:	d8 f7       	brcc	.-10     	; 0xbbc <strnlen_P+0x2>
 bc6:	80 95       	com	r24
 bc8:	90 95       	com	r25
 bca:	8e 0f       	add	r24, r30
 bcc:	9f 1f       	adc	r25, r31
 bce:	08 95       	ret

00000bd0 <strnlen>:
 bd0:	fc 01       	movw	r30, r24
 bd2:	61 50       	subi	r22, 0x01	; 1
 bd4:	70 40       	sbci	r23, 0x00	; 0
 bd6:	01 90       	ld	r0, Z+
 bd8:	01 10       	cpse	r0, r1
 bda:	d8 f7       	brcc	.-10     	; 0xbd2 <strnlen+0x2>
 bdc:	80 95       	com	r24
 bde:	90 95       	com	r25
 be0:	8e 0f       	add	r24, r30
 be2:	9f 1f       	adc	r25, r31
 be4:	08 95       	ret

00000be6 <fputc>:
 be6:	0f 93       	push	r16
 be8:	1f 93       	push	r17
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	fb 01       	movw	r30, r22
 bf0:	23 81       	ldd	r18, Z+3	; 0x03
 bf2:	21 fd       	sbrc	r18, 1
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <fputc+0x16>
 bf6:	8f ef       	ldi	r24, 0xFF	; 255
 bf8:	9f ef       	ldi	r25, 0xFF	; 255
 bfa:	2c c0       	rjmp	.+88     	; 0xc54 <fputc+0x6e>
 bfc:	22 ff       	sbrs	r18, 2
 bfe:	16 c0       	rjmp	.+44     	; 0xc2c <fputc+0x46>
 c00:	46 81       	ldd	r20, Z+6	; 0x06
 c02:	57 81       	ldd	r21, Z+7	; 0x07
 c04:	24 81       	ldd	r18, Z+4	; 0x04
 c06:	35 81       	ldd	r19, Z+5	; 0x05
 c08:	42 17       	cp	r20, r18
 c0a:	53 07       	cpc	r21, r19
 c0c:	44 f4       	brge	.+16     	; 0xc1e <fputc+0x38>
 c0e:	a0 81       	ld	r26, Z
 c10:	b1 81       	ldd	r27, Z+1	; 0x01
 c12:	9d 01       	movw	r18, r26
 c14:	2f 5f       	subi	r18, 0xFF	; 255
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
 c18:	31 83       	std	Z+1, r19	; 0x01
 c1a:	20 83       	st	Z, r18
 c1c:	8c 93       	st	X, r24
 c1e:	26 81       	ldd	r18, Z+6	; 0x06
 c20:	37 81       	ldd	r19, Z+7	; 0x07
 c22:	2f 5f       	subi	r18, 0xFF	; 255
 c24:	3f 4f       	sbci	r19, 0xFF	; 255
 c26:	37 83       	std	Z+7, r19	; 0x07
 c28:	26 83       	std	Z+6, r18	; 0x06
 c2a:	14 c0       	rjmp	.+40     	; 0xc54 <fputc+0x6e>
 c2c:	8b 01       	movw	r16, r22
 c2e:	ec 01       	movw	r28, r24
 c30:	fb 01       	movw	r30, r22
 c32:	00 84       	ldd	r0, Z+8	; 0x08
 c34:	f1 85       	ldd	r31, Z+9	; 0x09
 c36:	e0 2d       	mov	r30, r0
 c38:	09 95       	icall
 c3a:	89 2b       	or	r24, r25
 c3c:	e1 f6       	brne	.-72     	; 0xbf6 <fputc+0x10>
 c3e:	d8 01       	movw	r26, r16
 c40:	16 96       	adiw	r26, 0x06	; 6
 c42:	8d 91       	ld	r24, X+
 c44:	9c 91       	ld	r25, X
 c46:	17 97       	sbiw	r26, 0x07	; 7
 c48:	01 96       	adiw	r24, 0x01	; 1
 c4a:	17 96       	adiw	r26, 0x07	; 7
 c4c:	9c 93       	st	X, r25
 c4e:	8e 93       	st	-X, r24
 c50:	16 97       	sbiw	r26, 0x06	; 6
 c52:	ce 01       	movw	r24, r28
 c54:	df 91       	pop	r29
 c56:	cf 91       	pop	r28
 c58:	1f 91       	pop	r17
 c5a:	0f 91       	pop	r16
 c5c:	08 95       	ret

00000c5e <__ultoa_invert>:
 c5e:	fa 01       	movw	r30, r20
 c60:	aa 27       	eor	r26, r26
 c62:	28 30       	cpi	r18, 0x08	; 8
 c64:	51 f1       	breq	.+84     	; 0xcba <__ultoa_invert+0x5c>
 c66:	20 31       	cpi	r18, 0x10	; 16
 c68:	81 f1       	breq	.+96     	; 0xcca <__ultoa_invert+0x6c>
 c6a:	e8 94       	clt
 c6c:	6f 93       	push	r22
 c6e:	6e 7f       	andi	r22, 0xFE	; 254
 c70:	6e 5f       	subi	r22, 0xFE	; 254
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	af 4f       	sbci	r26, 0xFF	; 255
 c7a:	b1 e0       	ldi	r27, 0x01	; 1
 c7c:	3e d0       	rcall	.+124    	; 0xcfa <__ultoa_invert+0x9c>
 c7e:	b4 e0       	ldi	r27, 0x04	; 4
 c80:	3c d0       	rcall	.+120    	; 0xcfa <__ultoa_invert+0x9c>
 c82:	67 0f       	add	r22, r23
 c84:	78 1f       	adc	r23, r24
 c86:	89 1f       	adc	r24, r25
 c88:	9a 1f       	adc	r25, r26
 c8a:	a1 1d       	adc	r26, r1
 c8c:	68 0f       	add	r22, r24
 c8e:	79 1f       	adc	r23, r25
 c90:	8a 1f       	adc	r24, r26
 c92:	91 1d       	adc	r25, r1
 c94:	a1 1d       	adc	r26, r1
 c96:	6a 0f       	add	r22, r26
 c98:	71 1d       	adc	r23, r1
 c9a:	81 1d       	adc	r24, r1
 c9c:	91 1d       	adc	r25, r1
 c9e:	a1 1d       	adc	r26, r1
 ca0:	20 d0       	rcall	.+64     	; 0xce2 <__ultoa_invert+0x84>
 ca2:	09 f4       	brne	.+2      	; 0xca6 <__ultoa_invert+0x48>
 ca4:	68 94       	set
 ca6:	3f 91       	pop	r19
 ca8:	2a e0       	ldi	r18, 0x0A	; 10
 caa:	26 9f       	mul	r18, r22
 cac:	11 24       	eor	r1, r1
 cae:	30 19       	sub	r19, r0
 cb0:	30 5d       	subi	r19, 0xD0	; 208
 cb2:	31 93       	st	Z+, r19
 cb4:	de f6       	brtc	.-74     	; 0xc6c <__ultoa_invert+0xe>
 cb6:	cf 01       	movw	r24, r30
 cb8:	08 95       	ret
 cba:	46 2f       	mov	r20, r22
 cbc:	47 70       	andi	r20, 0x07	; 7
 cbe:	40 5d       	subi	r20, 0xD0	; 208
 cc0:	41 93       	st	Z+, r20
 cc2:	b3 e0       	ldi	r27, 0x03	; 3
 cc4:	0f d0       	rcall	.+30     	; 0xce4 <__ultoa_invert+0x86>
 cc6:	c9 f7       	brne	.-14     	; 0xcba <__ultoa_invert+0x5c>
 cc8:	f6 cf       	rjmp	.-20     	; 0xcb6 <__ultoa_invert+0x58>
 cca:	46 2f       	mov	r20, r22
 ccc:	4f 70       	andi	r20, 0x0F	; 15
 cce:	40 5d       	subi	r20, 0xD0	; 208
 cd0:	4a 33       	cpi	r20, 0x3A	; 58
 cd2:	18 f0       	brcs	.+6      	; 0xcda <__ultoa_invert+0x7c>
 cd4:	49 5d       	subi	r20, 0xD9	; 217
 cd6:	31 fd       	sbrc	r19, 1
 cd8:	40 52       	subi	r20, 0x20	; 32
 cda:	41 93       	st	Z+, r20
 cdc:	02 d0       	rcall	.+4      	; 0xce2 <__ultoa_invert+0x84>
 cde:	a9 f7       	brne	.-22     	; 0xcca <__ultoa_invert+0x6c>
 ce0:	ea cf       	rjmp	.-44     	; 0xcb6 <__ultoa_invert+0x58>
 ce2:	b4 e0       	ldi	r27, 0x04	; 4
 ce4:	a6 95       	lsr	r26
 ce6:	97 95       	ror	r25
 ce8:	87 95       	ror	r24
 cea:	77 95       	ror	r23
 cec:	67 95       	ror	r22
 cee:	ba 95       	dec	r27
 cf0:	c9 f7       	brne	.-14     	; 0xce4 <__ultoa_invert+0x86>
 cf2:	00 97       	sbiw	r24, 0x00	; 0
 cf4:	61 05       	cpc	r22, r1
 cf6:	71 05       	cpc	r23, r1
 cf8:	08 95       	ret
 cfa:	9b 01       	movw	r18, r22
 cfc:	ac 01       	movw	r20, r24
 cfe:	0a 2e       	mov	r0, r26
 d00:	06 94       	lsr	r0
 d02:	57 95       	ror	r21
 d04:	47 95       	ror	r20
 d06:	37 95       	ror	r19
 d08:	27 95       	ror	r18
 d0a:	ba 95       	dec	r27
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0xa2>
 d0e:	62 0f       	add	r22, r18
 d10:	73 1f       	adc	r23, r19
 d12:	84 1f       	adc	r24, r20
 d14:	95 1f       	adc	r25, r21
 d16:	a0 1d       	adc	r26, r0
 d18:	08 95       	ret

00000d1a <__prologue_saves__>:
 d1a:	2f 92       	push	r2
 d1c:	3f 92       	push	r3
 d1e:	4f 92       	push	r4
 d20:	5f 92       	push	r5
 d22:	6f 92       	push	r6
 d24:	7f 92       	push	r7
 d26:	8f 92       	push	r8
 d28:	9f 92       	push	r9
 d2a:	af 92       	push	r10
 d2c:	bf 92       	push	r11
 d2e:	cf 92       	push	r12
 d30:	df 92       	push	r13
 d32:	ef 92       	push	r14
 d34:	ff 92       	push	r15
 d36:	0f 93       	push	r16
 d38:	1f 93       	push	r17
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	cd b7       	in	r28, 0x3d	; 61
 d40:	de b7       	in	r29, 0x3e	; 62
 d42:	ca 1b       	sub	r28, r26
 d44:	db 0b       	sbc	r29, r27
 d46:	0f b6       	in	r0, 0x3f	; 63
 d48:	f8 94       	cli
 d4a:	de bf       	out	0x3e, r29	; 62
 d4c:	0f be       	out	0x3f, r0	; 63
 d4e:	cd bf       	out	0x3d, r28	; 61
 d50:	09 94       	ijmp

00000d52 <__epilogue_restores__>:
 d52:	2a 88       	ldd	r2, Y+18	; 0x12
 d54:	39 88       	ldd	r3, Y+17	; 0x11
 d56:	48 88       	ldd	r4, Y+16	; 0x10
 d58:	5f 84       	ldd	r5, Y+15	; 0x0f
 d5a:	6e 84       	ldd	r6, Y+14	; 0x0e
 d5c:	7d 84       	ldd	r7, Y+13	; 0x0d
 d5e:	8c 84       	ldd	r8, Y+12	; 0x0c
 d60:	9b 84       	ldd	r9, Y+11	; 0x0b
 d62:	aa 84       	ldd	r10, Y+10	; 0x0a
 d64:	b9 84       	ldd	r11, Y+9	; 0x09
 d66:	c8 84       	ldd	r12, Y+8	; 0x08
 d68:	df 80       	ldd	r13, Y+7	; 0x07
 d6a:	ee 80       	ldd	r14, Y+6	; 0x06
 d6c:	fd 80       	ldd	r15, Y+5	; 0x05
 d6e:	0c 81       	ldd	r16, Y+4	; 0x04
 d70:	1b 81       	ldd	r17, Y+3	; 0x03
 d72:	aa 81       	ldd	r26, Y+2	; 0x02
 d74:	b9 81       	ldd	r27, Y+1	; 0x01
 d76:	ce 0f       	add	r28, r30
 d78:	d1 1d       	adc	r29, r1
 d7a:	0f b6       	in	r0, 0x3f	; 63
 d7c:	f8 94       	cli
 d7e:	de bf       	out	0x3e, r29	; 62
 d80:	0f be       	out	0x3f, r0	; 63
 d82:	cd bf       	out	0x3d, r28	; 61
 d84:	ed 01       	movw	r28, r26
 d86:	08 95       	ret

00000d88 <_exit>:
 d88:	f8 94       	cli

00000d8a <__stop_program>:
 d8a:	ff cf       	rjmp	.-2      	; 0xd8a <__stop_program>
